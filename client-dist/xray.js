/* eleventy-plugin-xray v1.0.0-alpha.1
https://github.com/VividVisions/eleventy-plugin-xray */
const t=new class{storage;constructor(t){this.storage=t||window.sessionStorage}get(t,e=!1){const a=this.storage.getItem(t);return null===a&&!0===e?{}:null===a?null:JSON.parse(a)}set(t,e){this.storage.setItem(t,"string"==typeof e?e:JSON.stringify(e))}};class e{element;xrayElement;xrayRootElement;boundClickHandler;constructor(t,e,a){this.element=t,this.xrayRootElement=e,this.xrayElement=a,this.boundClickHandler=this.clickHandler.bind(this),this.element.querySelectorAll("a").forEach((t=>{t.addEventListener("click",this.boundClickHandler)}))}clickHandler(e){const a=e.target.closest("li");if(a.classList.toggle("active"),a.classList.contains("xray"))this.xrayElement.classList.toggle("active"),this.xrayRootElement.classList.toggle("active");else{const e=t.get("xray:hide",!0),n=a.classList.values().next().value,s=this.xrayRootElement.shadowRoot.getElementById(n);s&&s.classList.toggle("active"),a.classList.contains("active")?delete e[n]:e[n]=!0,t.set("xray:hide",e)}e.preventDefault()}}class a{element;label;boundClickHandler;constructor(t){this.element=t,this.label=this.element.querySelector("label"),this.boundClickHandler=this.clickHandler.bind(this),this.label.addEventListener("click",this.boundClickHandler)}clickHandler(t){const e=t.target.closest("ul.tree");e.classList.toggle("closed"),t.altKey&&e.querySelectorAll("ul.tree").forEach((t=>{t.classList.toggle("closed",e.classList.contains("closed"))}))}}function n(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var s=/["'&<>]/,o=function(t){var e,a=""+t,n=s.exec(a);if(!n)return a;var o="",i=0,l=0;for(i=n.index;i<a.length;i++){switch(a.charCodeAt(i)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}l!==i&&(o+=a.substring(l,i)),l=i+1,o+=e}return l!==i?o+a.substring(l,i):o};var i=n(o);function l(t){return`<ul class="root">${r(t)}</ul>`}function r(t,e=0){const a=t?.key?i(t.key)+": ":"";switch(t.type){case"string":case"number":case"boolean":case"regexp":case"symbol":case"date":case"instance":case"circular":case"function":case"unknown":return`<li>${a}<code class="${t.type}"><span>${t.content?i(t.content):""}</span></code></li>`;case"null":case"undefined":return`<li>${a}<code class="${t.type}"></code></li>`;case"object":return t.content&&t.content.length>0?`<li>\n\t\t\t\t<ul class="tree ${e>0?" closed":""}">\n\t\t\t\t\t<label>${a}<code class="${t.type}"></code></label>\n\t\t\t\t\t${t.content.map((t=>r(t,e+1))).join("")}\n\t\t\t\t</ul>\n\t\t\t\t</li>`:`<li>${a}<code class="${t.type}"></code></li>`;case"set":case"map":case"array":return t?.content?.length>0?`<li>\n\t\t\t\t<ul class="tree${e>0?" closed":""}">\n\t\t\t\t\t<label>${a}<code class="${t.type}"><span>${t.length}</span></code></label>\n\t\t\t\t\t${t.content.map((t=>r(t,e+1))).join("")}\n\t\t\t\t</ul>\n\t\t\t\t</li>`:`<li>${a}<code class="${t.type}"><span>${t.length}</span></code></li>`;default:throw new Error(`[xray-plugin] Unknown data type '${t.type}' encountered.`)}}const c=function(){};new class{xrayRootElement;xrayElement;times={};config={};shadowRoot;trayController;constructor(n){document.addEventListener("DOMContentLoaded",(async s=>{switch(this.times.dom=this.formatMS(performance.now()),this.xrayRootElement=document.getElementById(n),this.shadowRoot=this.xrayRootElement.shadowRoot,this.xrayElement=this.shadowRoot.getElementById("xray"),this.config.logLevel=this.xrayRootElement.dataset.loglevel||"info",this.config.relativePath=this.xrayRootElement.dataset.relative,["debug","info","warn","error"].forEach((t=>{this[t]=function(e,...a){this.log(t,`[xray] ${e}`,a)}})),this.config.logLevel){case"none":this.debug=c;case"error":this.warn=c;case"warn":this.info=c;case"info":this.debug=c}const o=document.createElement("style");o.textContent=":root:has(#xray-plugin.active) { overflow: hidden !important; }",document.querySelector("head").appendChild(o),setTimeout((()=>{this.xrayElement.classList.remove("loading")}),500),this.trayController=new e(this.shadowRoot.querySelector("#xray-tray"),this.xrayRootElement,this.xrayElement);const i=await this.loadData();this.debug("Rendering global data.");if(this.shadowRoot.querySelector("#globaldata div").innerHTML=l(i.globalData),i?.git){this.debug("Rendering Git info.");const t=i.git;this.shadowRoot.querySelector("#browser").insertAdjacentHTML("afterend",`<h3>Git</h3>\n\t<dl id="git">\n\t\t<dt>Branch</dt>\n\t\t<dd><span ${t?.branch?'class="string"':'class="undefined"'}>${t?.branch||"-"}</span></dd>\n\t\t<dt>Revision</dt>\n\t\t<dd><span ${t?.sha?`class="string" title="${t.sha}"`:'class="undefined"'}>${t?.sha?t.sha.substr(0,8):"-"}</span></dd>\n\t</dl>`)}const r=this.config.relativePath.substring(0,this.config.relativePath.lastIndexOf("/")),d=new URL(r,location.href),h=location.pathname.replace(d.pathname,"/").replace("index.html","");if(i.pages?.[h]?.benchmarks){this.debug("Rendering benchmarks.");const t=i.pages[h].benchmarks;let e=document.createElement("dt"),a=document.createElement("dd");e.textContent="File size";let n=i.pages[h].size;i.pages[h]?.xraySize&&(n-=i.pages[h].xraySize),n=this.formatBytes(n),a.innerHTML=`<span class="number">${n.value}</span>${n.unit} (excl. Xray)`;let s=this.shadowRoot.querySelector("dl#page");s.append(e),s.append(a),e=document.createElement("dt"),a=document.createElement("dd"),e.textContent="Compile time";let o=this.formatMS(t.compile);a.innerHTML=`<span class="number">${o.value}</span>${o.unit}`,s.append(e),s.append(a),e=document.createElement("dt"),a=document.createElement("dd"),e.textContent="Render time",o=this.formatMS(t.render),a.innerHTML=`<span class="number">${o.value}</span>${o.unit}${t.paginated?" (All paginated pages)":""}`,s.append(e),s.append(a),t.paginated&&(e=document.createElement("dt"),a=document.createElement("dd"),e.textContent="RT per page",o=this.formatMS(t.renderEach),a.innerHTML=`<span class="number">${o.value}</span>${o.unit} avg. (<span class="number">${t.paginated}</span> page${t.paginated>1?"s":""})`,s.append(e),s.append(a))}const u=t.get("xray:hide",!0);for(const t in u){const e=this.shadowRoot.querySelector(`#xray-tray .${t}`),a=this.shadowRoot.querySelector(`#${t}`);!0===u[t]?(e.classList.remove("active"),a.classList.remove("active")):(e.classList.add("active"),a.classList.add("active"))}this.shadowRoot.querySelectorAll("ul.tree").forEach((t=>{new a(t)}))}),{once:!0}),window.addEventListener("load",(t=>{this.debug("Rendering load times."),this.times.load=this.formatMS(performance.now()),this.shadowRoot.querySelector("dd.dom").innerHTML=`<span class="number">${this.times.dom.value}</span>${this.times.dom.unit}`,this.shadowRoot.querySelector("dd.load").innerHTML=`<span class="number">${this.times.load.value}</span>${this.times.load.unit}`}),{once:!0})}log(t,e,a){a?.length?console[t](e,...a):console[t](e)}formatMS(t){return t>=1e3?{value:(t/1e3).toFixed(2),unit:"s"}:t<.01?{value:(1e3*t).toFixed(2),unit:"μs"}:{value:t.toFixed(2),unit:"ms"}}formatBytes(t){return t>=1e6?{value:(t/1e6).toFixed(2),unit:"MB"}:t>=1e3?{value:(t/1e3).toFixed(2),unit:"KB"}:{value:t,unit:"B"}}async loadData(){let e,a=!1;try{e=t.get("xray:data")}catch(t){this.debug("Abandoning the cache due to corrupted data.",t),a=!0}if(e&&!a){const t=`${this.config.relativePath}/xray-timestamp.json`;let a;try{a=await fetch(t).then((t=>t.json()))}catch(t){this.error("Error while fetching xray-timestamp.json!",t)}if(this.debug("Cached timestamp  %s / Latest timestamp %s",e.timestamp,a.timestamp),a.timestamp===e.timestamp)return this.debug("Returning cached data."),e}const n=`${this.config.relativePath}/xray-data.json`;this.debug("Loading data…",n);try{const a=await fetch(n),s=a.clone();this.debug("Caching data…"),t.set("xray:data",await a.text()),e=await s.json()}catch(t){this.error("Error while fetching/parsing xray-data.json!",t)}return e}}("xray-plugin");
